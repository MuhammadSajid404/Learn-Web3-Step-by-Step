// require the newly installed tx library
var Tx = require('ethereumjs-tx');

// set up a Web3 connection
const Web3 = require('web3')
const web3 = new Web3('https://ropsten.infura.io/v3/f1d63286d3764c0388bf0c284b7e0137');

// assign accounts to variables
const account1 = "0x6fe382e5A03fD4631B8cbD2D9fb0141f178e1Fe8";
const account2 = "0xf61169baAbaE386c4823785e4a5F16b21F4a5d55";

//  save the private keys
const PrivateKey1 = "DD7AD3794F09B77E19C994C5E4203A551D0E03DDA8B7D48624D0EFA64F234A56";
const PrivateKey2 = "AAF6D10F42E105634600ED740176C69AACFF3ECCB8BD1EC0227B399D42A863E7";

// must convert private keys to a string of binary data with a Buffer
const PrivateKey1Buffer = Buffer.from(PrivateKey1, 'hex');
const PrivateKey2Buffer = Buffer.from(PrivateKey2, 'hex');

// build the transaction object
// get the transaction nonce
web3.eth.getTransactionCount(account1, (err, txCount) => {

    const txObject = {
      nonce:    web3.utils.toHex(txCount),
      to:       account2,
      value:    web3.utils.toHex(web3.utils.toWei('1', 'ether')),
      gasLimit: web3.utils.toHex(21000),
      gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei'))
    };

    // sign the transaction
    const tx = new Tx.Transaction(txObject, { chain: 'ropsten', hardfork: 'petersburg' });
    tx.sign(PrivateKey1Buffer);

    // serialize the transaction, convert it to a hex string, can be passed to Web3
    const serializedTx = tx.serialize();
    const raw = '0x' + serializedTx.toString('hex');

    // send signed serialized transaction
    web3.eth.sendSignedTransaction(raw, (err, txHash) => {
        console.log("txHash: ", txHash);
      });
    
  });

  
